/*
 * User Authentication API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package userapiserver

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
	security "github.com/ZolaraProject/library/security"
)

type Route struct {
	Name                string
	Method              string
	Pattern             string
	HandlerFunc         http.HandlerFunc
	RequiredPermissions []string
}

type Routes []Route

func NewRouter(jwtSecretKey string) *mux.Router {
	router := mux.NewRouter().StrictSlash(true).UseEncodedPath()
	for _, route := range routes {
		var handler http.Handler
		handler = route.HandlerFunc
		handler = Logger(handler, route.Name)
		handler = http.HandlerFunc(security.PermissionCheck(handler.ServeHTTP, route.RequiredPermissions, jwtSecretKey))

		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}

	return router
}

func Index(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	fmt.Fprintf(w, "{\"name\": \"User Authentication API\",\"version\": \"1.0.0\"}")
	w.WriteHeader(http.StatusOK)
}

func Healthz(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusOK)
}

var routes = Routes{
	Route{
		"Index",
		"GET",
		"/api/user/",
		Index,
		[]string{},
	},

	Route{
		"Healthz",
		"GET",
		"/healthz",
		Healthz,
		[]string{},
	},

	Route{
		"LogIn",
		strings.ToUpper("Post"),
		"/api/user/signIn",
		LogIn,
		[]string{  },
	},

	Route{
		"LogOut",
		strings.ToUpper("Delete"),
		"/api/user/signIn",
		LogOut,
		[]string{ "USER", },
	},

	Route{
		"RegisterUser",
		strings.ToUpper("Post"),
		"/api/user/register",
		RegisterUser,
		[]string{  },
	},

	Route{
		"GetUsers",
		strings.ToUpper("Get"),
		"/api/user/users",
		GetUsers,
		[]string{ "ADMIN", },
	},
}
